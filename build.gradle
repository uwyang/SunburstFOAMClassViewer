/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jhughes' at '12/9/16 1:26 PM' with Gradle 3.2
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2/userguide/tutorial_java_projects.html
 */

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    mavenCentral()
  }
  dependencies {
    classpath 'org.akhikhl.gretty:gretty:+'
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.2'
  }
}

repositories {   // repositories for Jar's you access in your code
  maven {
    url 'https://maven-central.storage.googleapis.com'             // Google's mirror of Maven Central
    //   url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT Repository (if needed)
  }

  // Use 'jcenter' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
  mavenCentral()
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'com.google.cloud.tools.appengine'

group = "com.serviceecho"   // Generated output GroupId
version = "1.0-SNAPSHOT"    // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {
  //providedCompile "javax.servlet:servlet-api:2.5"
  providedCompile "javax.servlet:javax.servlet-api:3.1.0"

  //https://cloud.google.com/appengine/docs/java/tools/gradle#creating_a_new_project
  compile "com.google.appengine:appengine:+"
  compile "com.google.appengine:appengine-api-1.0-sdk:+"
  compile "com.google.appengine:appengine-remote-api:+"
  testCompile "com.google.appengine:appengine-testing:+"
  testCompile "com.google.appengine:appengine-api-stubs:+"

  // The production code uses the SLF4J logging API at compile time
  compile "org.slf4j:slf4j-api:1.7.25"

  compile group: 'joda-time', name: 'joda-time', version: '2.9.9'

  // Dependency for your favourite test framework you want to use in your tests.
  // TestNG is also supported by the Gradle Test task. Just change the
  // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
  // 'test.useTestNG()' to your build script.
  testCompile "junit:junit:4.12"

  compile "jstl:jstl:1.2"
  compile "javax.json:javax.json-api:1.0"
  compile "org.apache-extras.beanshell:bsh:2.0b6"
  compile "com.google.api-client:google-api-client:1.22.0"
}

sourceSets {
  main {
    java {
      srcDir "node_modules/foam2/src"
      srcDir "node_modules/foam2/java_src"
      srcDir "build/src/java"
      srcDir "src/main/java"
      exclude '**/com/chrome/**'
      exclude '**/com/google/foam/demos/**'
    }
  }
}

war {
  // NOTE: DO NOT USE appengine-web.xml <public-root> or <static-files>, it simply does not work
  from("build/webapp/") /*{
    include "*.js"
    into("js")    //into ("static/js")
    }*/
  from("src/main/js/data/") {
    include "*.csv"
    into ("data")    //into ("static/data")
  }
}

appengine {
  //https://cloud.google.com/appengine/docs/java/tools/gradle-reference
  // run {
  //   storagePath = "appengine/"
  // }
  stage {
    enableJarClasses = true
  }
  deploy {
    // NOTE: leave both commented so one does not accidentally deploy
    //project = "serviceecho-project" // production
    //project = "serviceecho-c7d21" // development
    version = "v1"
    //appEngineDirectory = "/src/main/appengine"
  }
}

task generateJavaSource(type:Exec) {
  commandLine './tools/build.sh'
  args = ['-j']
}

compileJava {
  dependsOn generateJavaSource
}
